{"name":"Shushujs","tagline":"A Collection manager.","body":"# ShushuJS\r\nA Collection manager.\r\n\r\n## Install\r\nUse NPM to install with the command:\r\n\r\n```\r\nnpm i -S shushujs\r\n```\r\n\r\n## How to use\r\nImport ShushuJS inside your JS file using:\r\n\r\n```javascript\r\nvar shushujs = require('shushujs');\r\n```\r\n\r\nCreate your Collection passing the schema:\r\n\r\n```javascript\r\nvar Users = shushujs(schema);\r\n```\r\n\r\nListen the 'new' event:\r\n\r\n```javascript\r\nUsers.on('new', function (err, evt) {\r\n  if (err) throw err;\r\n  // do something\r\n});\r\n```\r\n\r\nAdd new data:\r\n\r\n```\r\nUsers.set({\r\n  name: 'sergiodxa',\r\n  email: 'sergio@xalambri.com.ar'\r\n});\r\n```\r\n\r\nIf you want to use it in browser just compile it using Browserify to create a browser compatible JS file.\r\n\r\nEnjoy!\r\n\r\n## Methods\r\n\r\n### .set(datum)\r\nAdd a new datum to the collection.\r\n\r\n### .update(updatedDatum, value, field)\r\nModify an actual datum in the collection using the *field* and *value* the find the datum and replacing it with the updatedDatum\r\n\r\n### .remove(value, field)\r\nRemove an actual datum from the collection using the *field* and *value* the find the datum\r\n\r\n### .getAll()\r\nReturn an array with all data in the collection.\r\n\r\n### .getSingle(value, field)\r\nReturn a single datum from the collection using the *field* and *value* the find the datum.\r\n\r\n## Events\r\nAll event listeners execute a callback returning two parameters, the first is *error* and the second is the event info.\r\n\r\n### new\r\nThis event is emitted when a new data is setted to the collection using the method .set().\r\n\r\nThe event info return an object with the next attributes:\r\n\r\n* old: the old collection array (with out the added datum).\r\n* data: the actual collection array.\r\n* added: the datum added\r\n\r\n### updated\r\nThis event is emitted when a datum is modified in the collection using the method .update().\r\n\r\nThe event info return an object with the next attributes:\r\n\r\n* old: the old collection array (with out the added datum).\r\n* data: the actual collection array.\r\n* updated: an object with the attributes:\r\n* * datum: the new datum.\r\n* * field: the field used to find the datum.\r\n* * value: the value used to find the datum.\r\n\r\n### removed\r\nThis event is emitted when a datum is removed from the collection using the method .remove().\r\n\r\nThe event info return an object with the next attributes:\r\n\r\n* old: the old collection array (with out the added datum).\r\n* data: the actual collection array.\r\n* updated: the datum removed.\r\n\r\n## Tests\r\nTo do tests just use the command:\r\n\r\n```\r\nnpm test\r\n```\r\n\r\n## License\r\nThe MIT License (MIT)\r\n\r\nCopyright (c) 2015 Sergio Daniel Xalambr√≠\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\nSOFTWARE.","google":"UA-48432002-6","note":"Don't delete this file! It's used internally to help with page regeneration."}